//
// Copyright (c) 2019 Jens Klimke <jens.klimke@rwth-aachen.de>. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
// Created by Jens Klimke on 03.10.18.
//

#include <gtest/gtest.h>
#include <base/functions.h>
#include <Eigen/Core>

#include <curve/Curve.h>
#include <curve/Line.h>
#include <curve/Arc.h>
#include <curve/Spiral.h>
#include <curve/Poly3.h>

// TODO: test ODR-Elements ParamPoly3 (and also Poly3)

using namespace simmap::curve;

class CurveTest : public testing::Test {

protected:

    Eigen::RowVectorXd s_sC, s_kC, s_s, s_x, s_y, s_t, s_k;


public:


    void SetUp() override {}

    void TearDown() override {}


    void createTestPoints() {

        // creation points
        std::vector<double> tmp = {0.0,26.680880188102961,42.069047528136529,52.992433475824505,67.184378619857455,105.997358357543774,122.849553361511369,134.712155475288085,146.756677972603256,156.761252965297047,175.542427329206504,188.998034599636981,199.271910531616243,221.365213436889832,238.069888538673865,252.037563280980578,266.210611304651820,282.080846937336332};
        s_sC = Eigen::RowVectorXd::Map(tmp.data(), tmp.size());

        tmp = std::vector<double>{0.0,0.0,0.003375867789870,0.003375867789870,0.0,0.0,-0.019047385067937,-0.019047385067937,0.0,0.0,-0.014097351757656,-0.014097351757656,0.0,0.0,0.013528621549245,0.013528621549245,0.0,0.0};
        s_kC = Eigen::RowVectorXd::Map(tmp.data(), tmp.size());

        // test points and results
        tmp = std::vector<double>{0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,21.0,22.0,23.0,24.0,25.0,26.0,27.0,28.0,29.0,30.0,31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,40.0,41.0,42.0,43.0,44.0,45.0,46.0,47.0,48.0,49.0,50.0,51.0,52.0,53.0,54.0,55.0,56.0,57.0,58.0,59.0,60.0,61.0,62.0,63.0,64.0,65.0,66.0,67.0,68.0,69.0,70.0,71.0,72.0,73.0,74.0,75.0,76.0,77.0,78.0,79.0,80.0,81.0,82.0,83.0,84.0,85.0,86.0,87.0,88.0,89.0,90.0,91.0,92.0,93.0,94.0,95.0,96.0,97.0,98.0,99.0,100.0,101.0,102.0,103.0,104.0,105.0,106.0,107.0,108.0,109.0,110.0,111.0,112.0,113.0,114.0,115.0,116.0,117.0,118.0,119.0,120.0,121.0,122.0,123.0,124.0,125.0,126.0,127.0,128.0,129.0,130.0,131.0,132.0,133.0,134.0,135.0,136.0,137.0,138.0,139.0,140.0,141.0,142.0,143.0,144.0,145.0,146.0,147.0,148.0,149.0,150.0,151.0,152.0,153.0,154.0,155.0,156.0,157.0,158.0,159.0,160.0,161.0,162.0,163.0,164.0,165.0,166.0,167.0,168.0,169.0,170.0,171.0,172.0,173.0,174.0,175.0,176.0,177.0,178.0,179.0,180.0,181.0,182.0,183.0,184.0,185.0,186.0,187.0,188.0,189.0,190.0,191.0,192.0,193.0,194.0,195.0,196.0,197.0,198.0,199.0,200.0,201.0,202.0,203.0,204.0,205.0,206.0,207.0,208.0,209.0,210.0,211.0,212.0,213.0,214.0,215.0,216.0,217.0,218.0,219.0,220.0,221.0,222.0,223.0,224.0,225.0,226.0,227.0,228.0,229.0,230.0,231.0,232.0,233.0,234.0,235.0,236.0,237.0,238.0,239.0,240.0,241.0,242.0,243.0,244.0,245.0,246.0,247.0,248.0,249.0,250.0,251.0,252.0,253.0,254.0,255.0,256.0,257.0,258.0,259.0,260.0,261.0,262.0,263.0,264.0,265.0,266.0,267.0,268.0,269.0,270.0,271.0,272.0,273.0,274.0,275.0,276.0,277.0,278.0,279.0,280.0,281.0,282.0};
        s_s = Eigen::RowVectorXd::Map(tmp.data(), tmp.size());

        tmp = std::vector<double>{0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,21.0,22.0,23.0,24.0,25.0,26.0,26.999999999996017,27.999999995194283,28.999999919285234,29.999999515323807,30.999998191521954,31.999994876865735,32.999987876734103,33.999974728521217,34.999952057265176,35.999915431287363,36.999859217848133,37.999776438826316,38.999658626432165,39.999495678965374,40.999275716632610,41.998984937441620,42.998608309708828,43.998133401187708,44.997548820507518,45.996843177857926,46.996005084808239,47.995023154437263,48.993886001463018,49.992582242372535,50.991100495551549,51.989429381414240,52.987557522533990,53.985476192566587,54.983187800910279,55.980699327595410,56.978019817701430,57.975160211313288,58.972133173594401,59.968952924978048,60.965635071475475,61.962196435095926,62.958654884371143,63.955029164974363,64.951338730421867,65.947603572843306,66.943844053805719,67.940078870772453,68.936313666195588,69.932548461618737,70.928783257041886,71.925018052465035,72.921252847888169,73.917487643311318,74.913722438734467,75.909957234157616,76.906192029580751,77.902426825003900,78.898661620427049,79.894896415850198,80.891131211273347,81.887366006696482,82.883600802119631,83.879835597542780,84.876070392965914,85.872305188389063,86.868539983812212,87.864774779235361,88.861009574658510,89.857244370081645,90.853479165504794,91.849713960927943,92.845948756351078,93.842183551774227,94.838418347197376,95.834653142620525,96.830887938043674,97.827122733466808,98.823357528889957,99.819592324313106,100.815827119736241,101.812061915159404,102.808296710582539,103.804531506005688,104.800766301428837,105.797001096852284,106.793252321366325,107.789600833653282,108.786139834724679,109.782954876369516,110.780120037234454,111.777694094164872,112.775716688026975,113.774204483916407,114.773147326515229,115.772504392388029,116.772200342209047,117.772121477284699,118.772111906280728,119.771969729776487,120.771443252151073,121.770227232352056,122.767959235907469,123.764241643561448,124.758705892802240,125.750991200046201,126.740737572212197,127.727585937324221,128.711178274779797,129.691157745236865,130.667168820072391,131.638857410365034,132.605870995356014,133.567858750340520,134.524473553967312,135.475538545612096,136.421212865129007,137.361760930777564,138.297517438074408,139.228879656425477,140.156299864722172,141.080277923375803,142.001353975337679,142.920101264409709,143.837119055571520,144.753025639122399,145.668449869542798,146.583828141882918,147.499206414223039,148.414584686563160,149.329962958903309,150.245341231243430,151.160719503583550,152.076097775923671,152.991476048263792,153.906854320603941,154.822231907531489,155.737515090715021,156.652423284660074,157.566651766598085,158.479892355685053,159.391831875989681,160.302150627950084,161.210520871074152,162.116605320786590,163.020055662483145,163.920511086039170,164.817596844233634,165.710922838792527,166.600082238023532,167.484650130308808,168.364182218040185,169.238213556923768,170.106257345941941,170.967803773644363,171.822325207597970,172.669450326763922,173.509000497444333,174.340808874124946,175.164710149834207,175.980540588994700,176.788138059962705,177.587342067249239,178.377993783415235,179.159936080636044,179.933013561927339,180.697072592027894,181.451961327931542,182.197529749064529,182.933785955069141,183.661374655218282,184.381131198426317,185.093925783135006,185.800658747176158,186.502256043975905,187.199664883336112,187.893849513277956,188.585787117993846,189.276463805807509,189.966806805788650,190.657146479530212,191.347486153271745,192.037825827013307,192.728165500754841,193.418505174496403,194.108844848237936,194.799184521979498,195.489524195721032,196.179863869462594,196.870203543204127,197.560543216945689,198.250882890687222,198.941222564428784,199.631562238170318,200.321901911911880,201.012241585653413,201.702581259394975,202.392920933136509,203.083260606878071,203.773600280619604,204.463939954361166,205.154304606060634,205.845045825009066,206.536743738364578,207.229981003833416,207.925336680076583,208.623384838982645,209.324693157267461,210.029821481914752,210.739320364121681,211.453729556595164,212.173576469264532,212.899374578731710,213.631621787074437,214.370798725953478,215.117367002352438,215.871767382700938,216.634417912601492,217.405643146313508,218.185409162326749,218.973573276795520,219.769991239285389,220.574517288736246,221.387004180139058,222.207303211485254,223.035264250982124,223.870735764529741,224.713564843455458,225.563597232498921,226.420677358044031,227.284648356592413,228.155352103472495,229.032561590029417,229.915756001967395,230.804357443270106,231.697816836275592,232.595611841070564,233.497244693862797,234.402239978061488,235.310142336944153,236.220514136097705,237.132933083194558,238.046989812110894,238.962285437909685,239.878429088803756,240.795035420880708,241.711753392992932,242.628471958909955,243.545190524826978,244.461909090743973,245.378627656660996,246.295346222577990,247.212064788495013,248.128783354412008,249.045501920329031,249.962220486246025,250.878939052163048,251.795657618080043,252.712376183997065,253.629094749914060,254.545813315831083,255.462531881748077};
        s_x = Eigen::RowVectorXd::Map(tmp.data(), tmp.size());

        tmp = std::vector<double>{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.000001188252074,0.000083926672976,0.000456054585026,0.001336952638479,0.002946001093142,0.005502579156041,0.009226063793424,0.014335827858733,0.021051237378180,0.029591647835574,0.040176399298082,0.053024810224607,0.068356169798559,0.086389728626819,0.107344687646813,0.131440185083711,0.158865792638911,0.189665821820057,0.223839933647763,0.261387738657641,0.302308808937195,0.346602678130588,0.394268841443940,0.445306755651113,0.499715839099929,0.557495471718778,0.618644995006527,0.683123246625290,0.750730848588110,0.821229857816811,0.894382449439360,0.969950915865349,1.047697663606149,1.127385208042127,1.208776166339155,1.291633248716499,1.375719248267953,1.460797029537957,1.546629516054286,1.632979677018735,1.719610513357153,1.806306473255657,1.893002680717133,1.979698888178609,2.066395095640085,2.153091303101561,2.239787510563037,2.326483718024513,2.413179925485989,2.499876132947465,2.586572340408941,2.673268547870417,2.759964755331893,2.846660962793369,2.933357170254845,3.020053377716321,3.106749585177797,3.193445792639273,3.280142000100748,3.366838207562225,3.453534415023701,3.540230622485177,3.626926829946653,3.713623037408128,3.800319244869605,3.887015452331080,3.973711659792556,4.060407867254032,4.147104074715509,4.233800282176984,4.320496489638460,4.407192697099936,4.493888904561413,4.580585112022888,4.667281319484364,4.753977526945841,4.840673734407316,4.927369941868792,5.014066149330269,5.100762356788285,5.187269402649489,5.272647385264233,5.355769890056103,5.435509873142055,5.510739401170247,5.580329456018182,5.643149826009500,5.698069105346280,5.743954823488882,5.779673726238328,5.804092230276573,5.816077072885556,5.814496178482607,5.798219763462009,5.766121700602806,5.717081163972251,5.649985214425973,5.564013527274636,5.459082007823067,5.335228724377538,5.192498609907223,5.030943445742850,4.850621842790880,4.651599220269915,4.433947781977167,4.197746490093478,3.943081036536493,3.670043811872321,3.378739869978881,3.069791701574246,2.744709936589323,2.405075610643263,2.052448969491482,1.688370076569804,1.314359922256791,0.931921973234227,0.542544101673096,0.147700835291348,-0.251144129440661,-0.652535207582321,-1.055025530919824,-1.457620387478629,-1.860215244037434,-2.262810100596240,-2.665404957155045,-3.067999813713850,-3.470594670272654,-3.873189526831460,-4.275784383390265,-4.678379239949070,-5.080975654900462,-5.483786613260938,-5.887448419634032,-6.292647049766198,-6.700066942953313,-7.110390298609980,-7.524296354119881,-7.942460638260155,-8.365554194552629,-8.794242768970232,-9.229185956519334,-9.671036301329353,-10.120438345010925,-10.578027618195236,-11.044429570341233,-11.520258433096595,-12.006116012724361,-12.502590407362561,-13.010254645171241,-13.529655032105932,-14.061032930884723,-14.604299853992574,-15.159347836888101,-15.726066573755990,-16.304343439428287,-16.894063511766429,-17.495109594500221,-18.107362240518349,-18.730699775606396,-19.364998322627258,-20.010131826139784,-20.665972077449716,-21.332388740087826,-22.009080556278153,-22.695085372517582,-23.389305106257673,-24.090672828737876,-24.798149533506759,-25.510720693254719,-26.227392637656688,-26.947188783376109,-27.669145746046905,-28.392309362946307,-29.115791596493391,-29.839277003988535,-30.562762411483678,-31.286247818978818,-32.009733226473962,-32.733218633969102,-33.456704041464249,-34.180189448959389,-34.903674856454529,-35.627160263949676,-36.350645671444816,-37.074131078939956,-37.797616486435103,-38.521101893930243,-39.244587301425391,-39.968072708920531,-40.691558116415671,-41.415043523910818,-42.138528931405958,-42.862014338901105,-43.585499746396245,-44.308985153891385,-45.032446725431825,-45.755548721798853,-46.477735502803142,-47.198444567364810,-47.917109682808714,-48.633159489621200,-49.346016126489410,-50.055093881409320,-50.759797874795680,-51.459522780703942,-52.153651592479449,-52.841554439380360,-53.522587460977384,-54.196091746411838,-54.861392345892448,-55.517797362126970,-56.164597129714821,-56.801147510763826,-57.427206380517354,-58.042659121830646,-58.647393094044645,-59.241297618258251,-59.824263997584573,-60.396185537044943,-60.956957563096246,-61.506477442788203,-62.044644602547606,-62.571360546585218,-63.086528874922493,-63.590055301034930,-64.081847669108413,-64.561940621249519,-65.030934611285787,-65.489603407597414,-65.938737687764004,-66.379143146925230,-66.811638738267405,-67.237055028694556,-67.656232659636856,-68.070020902538630,-68.479276298218323,-68.884861368997662,-69.287643392252377,-69.688493223838449,-70.088284159691142,-70.487819088814661,-70.887352655493444,-71.286886222172214,-71.686419788850984,-72.085953355529767,-72.485486922208537,-72.885020488887307,-73.284554055566090,-73.684087622244860,-74.083621188923630,-74.483154755602413,-74.882688322281183,-75.282221888959953,-75.681755455638722,-76.081289022317506,-76.480822588996276};
        s_y = Eigen::RowVectorXd::Map(tmp.data(), tmp.size());

        tmp = std::vector<double>{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.000011170588879,0.000190869712753,0.000589949592975,0.001208410229546,0.002046251622464,0.003103473771731,0.004380076677347,0.005876060339310,0.007591424757622,0.009526169932282,0.011680295863290,0.014053802550647,0.016646689994352,0.019458958194405,0.022490607150807,0.025741636863556,0.029116981697842,0.032492849487713,0.035868717277583,0.039244585067454,0.042620452857324,0.045996320647195,0.049372188437065,0.052748056226936,0.056123924016806,0.059499791806677,0.062875652787186,0.066130784662227,0.069148044437593,0.071927432113286,0.074468947689304,0.076772591165648,0.078838362542319,0.080666261819315,0.082256288996637,0.083608444074285,0.084722727052258,0.085599137930558,0.086237676709184,0.086638343388136,0.086801137967413,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805177311339,0.086237060878270,0.084538683071922,0.081710043892297,0.077751143339392,0.072661981413210,0.066442558113749,0.059092873441011,0.050612927394993,0.041002719975698,0.030262251183125,0.018391521017273,0.005390529478143,6.274444583745320,6.259183069459634,6.242791293800670,6.225269256768426,6.206629749638825,6.187582364570888,6.168534979502951,6.149487594435014,6.130440209367077,6.111392824299140,6.092345439231202,6.073298054163265,6.054250669095328,6.035203284027391,6.016155898959454,5.997108513891517,5.978126642462779,5.960325166316444,5.944105104881419,5.929466458157702,5.916409226145292,5.904933408844191,5.895039006254398,5.886726018375914,5.879994445208736,5.874844286752868,5.871275543008308,5.869288213975056,-0.414349821837018,-0.414349821837018,-0.414349821837018,-0.414349821837018,-0.414349821837018,-0.414349821837018,-0.414349821837018,-0.414349821837018,-0.414349821837018,-0.414349821837018,5.868814092880601,5.868259581399777,5.866954459148588,5.864898726127035,5.862092382335116,5.858535427772832,5.854227862440183,5.849169686337169,5.843360899463790,5.836801501820046,5.829491493405937,5.821430874221462,5.812619644266622,5.803057803541417,5.792745352045848,5.781682289779913,5.769868616743612,5.757304332936947,5.743989438359916,5.730002511732753,5.715905159975097,5.701807808217441,5.687710456459786,5.673613104702130,5.659515752944474,5.645418401186818,5.631321049429163,5.617223697671507,5.603126345913851,5.589028994156195,5.574931642398539,5.560834290640884,5.546736941533408,5.533328364184353,5.521291941984046,5.510627674932485,5.501335563029673,5.493415606275606,5.486867804670288,5.481692158213717,5.477888666905893,5.475457330746816,5.474398149736487,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,5.474510594606136,5.475429624629644,5.477158525031762,5.479697295812491,5.483045936971831,5.487204448509780,5.492172830426339,5.497951082721510,5.504539205395290,5.511937198447682,5.520145061878683,5.529162795688295,5.538990399876518,5.549627874443350,5.561075219388793,5.573332434712846,5.586399520415510,5.599926164096143,5.613454785645388,5.626983407194634,5.640512028743879,5.654040650293124,5.667569271842369,5.681097893391614,5.694626514940860,5.708155136490105,5.721683758039350,5.735212379588596,5.748741001137841,5.762269622687086,5.775798244236332,5.788884781923683,5.801017461479484,5.812195609481688,5.822419225930296,5.831688310825306,5.840002864166718,5.847362885954532,5.853768376188750,5.859219334869370,5.863715761996393,5.867257657569818,5.869845021589646,5.871477854055876,5.872156154968510,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957};
        s_t = Eigen::RowVectorXd::Map(tmp.data(), tmp.size());

        tmp = std::vector<double>{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.000070008745700,0.000289389502048,0.000508770258396,0.000728151014745,0.000947531771093,0.001166912527441,0.001386293283789,0.001605674040138,0.001825054796486,0.002044435552834,0.002263816309183,0.002483197065531,0.002702577821879,0.002921958578227,0.003141339334576,0.003360720090924,0.003375867789870,0.003375867789870,0.003375867789870,0.003375867789870,0.003375867789870,0.003375867789870,0.003375867789870,0.003375867789870,0.003375867789870,0.003375867789870,0.003374067924878,0.003136195825204,0.002898323725529,0.002660451625855,0.002422579526181,0.002184707426507,0.001946835326833,0.001708963227159,0.001471091127485,0.001233219027811,0.000995346928137,0.000757474828463,0.000519602728789,0.000281730629115,0.000043858529441,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.000002985746430,-0.001133247119709,-0.002263508492987,-0.003393769866265,-0.004524031239543,-0.005654292612821,-0.006784553986100,-0.007914815359378,-0.009045076732656,-0.010175338105934,-0.011305599479213,-0.012435860852491,-0.013566122225769,-0.014696383599047,-0.015826644972326,-0.016956906345604,-0.018087167718882,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.018592183501988,-0.017010768790680,-0.015429354079372,-0.013847939368063,-0.012266524656755,-0.010685109945447,-0.009103695234139,-0.007522280522831,-0.005940865811522,-0.004359451100214,-0.002778036388906,-0.001196621677598,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.000179206095641,-0.000929816866006,-0.001680427636371,-0.002431038406736,-0.003181649177101,-0.003932259947466,-0.004682870717832,-0.005433481488197,-0.006184092258562,-0.006934703028927,-0.007685313799292,-0.008435924569657,-0.009186535340022,-0.009937146110387,-0.010687756880752,-0.011438367651118,-0.012188978421483,-0.012939589191848,-0.013690199962213,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014094654923428,-0.012722499774681,-0.011350344625934,-0.009978189477187,-0.008606034328439,-0.007233879179692,-0.005861724030945,-0.004489568882198,-0.003117413733450,-0.001745258584703,-0.000373103435956,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.000514094834203,0.001323965212813,0.002133835591424,0.002943705970034,0.003753576348644,0.004563446727255,0.005373317105865,0.006183187484475,0.006993057863086,0.007802928241696,0.008612798620307,0.009422668998917,0.010232539377527,0.011042409756138,0.011852280134748,0.012662150513359,0.013472020891969,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.012609945332600,0.011655413779003,0.010700882225406,0.009746350671808,0.008791819118211,0.007837287564614,0.006882756011016,0.005928224457419,0.004973692903821,0.004019161350224,0.003064629796627,0.002110098243029,0.001155566689432,0.000201035135834,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
        s_k = Eigen::RowVectorXd::Map(tmp.data(), tmp.size());

    }


    Line createLine(double x, double y, double phi, double len) {

        // create line
        Line l(len);
        l.startPoint({{x, y, 0.0}, phi});

        return l;

    }


    Arc createArc(double x, double y, double phi, double R, double len) {

        // create arc
        Arc a(len, 1.0 / R);
        a.startPoint({{x, y, 0.0}, phi});

        return a;

    }


    Spiral createSpiral(double x, double y, double phi, double c0, double c1, double len) {

        // create spiral
        Spiral s(len, c0, c1);
        s.startPoint({{x, y, 0.0}, phi});

        return s;

    }


    Poly3 createPoly3(double x0, double y0, double x1, double y1, double dx0, double dy0, double dx1, double dy1) {

        auto px = base::poly1::order3_fromValueAndDerivative(0.0, 1.0, x0, dx0, x1, dx1);
        auto py = base::poly1::order3_fromValueAndDerivative(0.0, 1.0, y0, dy0, y1, dy1);

        return Poly3(px.parameters().data(), py.parameters().data());

    }



    void createCurve(Curve *c, double x, double y, double phi, const Eigen::RowVectorXd &s,
                     const Eigen::RowVectorXd &k) {

        // set data for c
        c->curvature(s, k);
        c->startPoint({{x, y, 0.0}, phi, 0.0});

    }


    static bool compareCurvePoints(const def::CurvePoint& p0, const def::CurvePoint& p1, double eps,
            double angle_offset = 0.0, double curvature_factor = 1.0) {

        double dPhi  = base::angleDiff(p0.angle, p1.angle - angle_offset);
        double dCurv = p0.curvature - p1.curvature * curvature_factor;

        return        (fabs(p0.position.x() - p1.position.x()) < def::EPS_DISTANCE)
                   && (fabs(p0.position.y() - p1.position.y()) < def::EPS_DISTANCE)
                   && (fabs(p0.position.z() - p1.position.z()) < def::EPS_DISTANCE)
                   && (fabs(dPhi)                              < def::EPS_ANGLE)
                   && (fabs(dCurv)                             < def::EPS_CURVATURE);

    }

    static bool compareCurvePointVectors(const std::vector<def::CurvePoint> &p0, const std::vector<def::CurvePoint> &p1,
            double eps, double angle_offset = 0.0, double curvature_factor = 1.0) {

        if (p0.size() != p1.size())
            throw std::invalid_argument("vector sizes not equal");

        // iterate over elements
        for(size_t i = 0; i < p0.size(); ++i)
            if(!compareCurvePoints(p0[i], p1[i], eps, angle_offset, curvature_factor))
                return false;

        return true;

    }


};


TEST_F(CurveTest, Line) {

    double p0 = atan2(3.0, 4.0);

    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({{-10.0, -20.0, 0.0}, M_PI_2, 0.0}), createLine(-10.0, -20.0, M_PI * 0.5, 10.0).startPoint(), 1e-12));
    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({{0.0, 0.0, 0.0}, 0.0, 0.0}), createLine(0.0, 0.0, 0.0, 0.0).endPoint(), 1e-12));
    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({{20.0, -10.0, 0.0}, 0.0, 0.0}), createLine(10.0, -10.0, 0.0, 10.0).endPoint(), 1e-12));
    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({{4.0, 3.0, 0.0}, p0, 0.0}), createLine(0.0, 0.0, p0, 5.0).endPoint(), 1e-12));
    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({{0.0, 10.0, 0.0}, M_PI_2, 0.0}), createLine(0.0, 0.0, M_PI * 0.5, 10.0).endPoint(), 1e-12));
    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({{0.0, -10.0, 0.0}, -M_PI_2, 0.0}), createLine(0.0, 0.0, M_PI * -0.5, 10.0).endPoint(), 1e-12));
    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({{-10.0, 0.0, 0.0}, M_PI, 0.0}), createLine(0.0, 0.0, M_PI, 10.0).endPoint(), 1e-12));
    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({{0.0, -10.0, 0.0}, M_PI * 1.5, 0.0}), createLine(0.0, 0.0, M_PI * 1.5, 10.0).endPoint(), 1e-12));
    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({{10.0, 0.0, 0.0}, M_PI * 2.0, 0.0}), createLine(0.0, 0.0, M_PI * 2.0, 10.0).endPoint(), 1e-12));
    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({{0.0, 10.0, 0.0}, M_PI * 2.5, 0.0}), createLine(0.0, 0.0, M_PI * 2.5, 10.0).endPoint(), 1e-12));

}


TEST_F(CurveTest, Arc) {

    double R = 100.0;
    auto arc = createArc(10.0, 10.0, 10.0, R, 2.0 * M_PI * R);

    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({{-10.0, -20.0, 0.0}, M_PI_2, 1.0 / R}), createArc(-10.0, -20.0, M_PI * 0.5, R, 10.0).startPoint(), 1e-12));
    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({{0.0, 0.0, 0.0}, 0.0, 1.0 / R}), createArc(0.0, 0.0, 0.0, R, 0.0).endPoint(), 1e-12));
    EXPECT_TRUE(CurveTest::compareCurvePoints(arc.endPoint(), arc.startPoint(), 1e-12));

}


TEST_F(CurveTest, Spiral) {

    double c1 = 0.01;
    double c2 = 0.02;

    auto point = createSpiral(-10.0, -20.0, M_PI * 0.5, c1, c2, 10.0).startPoint();
    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({{-10.0, -20.0, 0.0}, M_PI_2, c1}), point, 1e-12));

    point = createSpiral(0.0, 0.0, 0.0, c1, c2, 0.0).endPoint();
    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({{0.0, 0.0, 0.0}, 0.0, c1}), point, 1e-12));

}


TEST_F(CurveTest, Poly3) {

    // calculate length
    auto l = sqrt(5.0);

    // create poly and get parameters
    auto p3 = createPoly3(0.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0);
    auto p = p3.parameters();

    // check length
    EXPECT_NEAR(l, p3.length(), def::EPS_DISTANCE);

    // check parameters
    EXPECT_DOUBLE_EQ(0.0, p(3));
    EXPECT_DOUBLE_EQ(1.0, p(2));
    EXPECT_DOUBLE_EQ(0.0, p(1));
    EXPECT_DOUBLE_EQ(0.0, p(0));

    EXPECT_DOUBLE_EQ(0.0, p(7));
    EXPECT_DOUBLE_EQ(2.0, p(6));
    EXPECT_DOUBLE_EQ(0.0, p(5));
    EXPECT_DOUBLE_EQ(0.0, p(4));

    EXPECT_NEAR(0.0, p3(0.0 * l).position.x(), def::EPS_DISTANCE);
    EXPECT_NEAR(0.2, p3(0.2 * l).position.x(), def::EPS_DISTANCE);
    EXPECT_NEAR(0.5, p3(0.5 * l).position.x(), def::EPS_DISTANCE);
    EXPECT_NEAR(1.0, p3(1.0 * l).position.x(), def::EPS_DISTANCE);

    EXPECT_NEAR(0.0, p3(0.0 * l).position.y(), def::EPS_DISTANCE);
    EXPECT_NEAR(0.4, p3(0.2 * l).position.y(), def::EPS_DISTANCE);
    EXPECT_NEAR(1.0, p3(0.5 * l).position.y(), def::EPS_DISTANCE);
    EXPECT_NEAR(2.0, p3(1.0 * l).position.y(), def::EPS_DISTANCE);


}


TEST_F(CurveTest, Poly3Complex) {

    // create poly and get parameters
    auto p3 = createPoly3(10.0, 5.0, 25.0, 20.0, 50.0, 0.0, 0.0, 50.0);
    auto p = p3.parameters();

    EXPECT_NEAR(10.0, p3(0.0).position.x(), def::EPS_DISTANCE);
    EXPECT_NEAR(5.0, p3(0.0).position.y(), def::EPS_DISTANCE);
    EXPECT_NEAR(25.0, p3(p3.length()).position.x(), def::EPS_DISTANCE);
    EXPECT_NEAR(20.0, p3(p3.length()).position.y(), def::EPS_DISTANCE);

}


TEST_F(CurveTest, Curve) {

    using namespace Eigen;

    // creation points
    std::vector<double> tmp;

    tmp = {0.0,26.680880188102961,42.069047528136529,52.992433475824505,67.184378619857455,105.997358357543774,122.849553361511369,134.712155475288085,146.756677972603256,156.761252965297047,175.542427329206504,188.998034599636981,199.271910531616243,221.365213436889832,238.069888538673865,252.037563280980578,266.210611304651820,282.080846937336332};
    s_sC = Eigen::RowVectorXd::Map(tmp.data(), tmp.size());

    tmp = std::vector<double>{0.0,0.0,0.003375867789870,0.003375867789870,0.0,0.0,-0.019047385067937,-0.019047385067937,0.0,0.0,-0.014097351757656,-0.014097351757656,0.0,0.0,0.013528621549245,0.013528621549245,0.0,0.0};
    s_kC = Eigen::RowVectorXd::Map(tmp.data(), tmp.size());

    // test points and results
    tmp = std::vector<double>{0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,21.0,22.0,23.0,24.0,25.0,26.0,27.0,28.0,29.0,30.0,31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,40.0,41.0,42.0,43.0,44.0,45.0,46.0,47.0,48.0,49.0,50.0,51.0,52.0,53.0,54.0,55.0,56.0,57.0,58.0,59.0,60.0,61.0,62.0,63.0,64.0,65.0,66.0,67.0,68.0,69.0,70.0,71.0,72.0,73.0,74.0,75.0,76.0,77.0,78.0,79.0,80.0,81.0,82.0,83.0,84.0,85.0,86.0,87.0,88.0,89.0,90.0,91.0,92.0,93.0,94.0,95.0,96.0,97.0,98.0,99.0,100.0,101.0,102.0,103.0,104.0,105.0,106.0,107.0,108.0,109.0,110.0,111.0,112.0,113.0,114.0,115.0,116.0,117.0,118.0,119.0,120.0,121.0,122.0,123.0,124.0,125.0,126.0,127.0,128.0,129.0,130.0,131.0,132.0,133.0,134.0,135.0,136.0,137.0,138.0,139.0,140.0,141.0,142.0,143.0,144.0,145.0,146.0,147.0,148.0,149.0,150.0,151.0,152.0,153.0,154.0,155.0,156.0,157.0,158.0,159.0,160.0,161.0,162.0,163.0,164.0,165.0,166.0,167.0,168.0,169.0,170.0,171.0,172.0,173.0,174.0,175.0,176.0,177.0,178.0,179.0,180.0,181.0,182.0,183.0,184.0,185.0,186.0,187.0,188.0,189.0,190.0,191.0,192.0,193.0,194.0,195.0,196.0,197.0,198.0,199.0,200.0,201.0,202.0,203.0,204.0,205.0,206.0,207.0,208.0,209.0,210.0,211.0,212.0,213.0,214.0,215.0,216.0,217.0,218.0,219.0,220.0,221.0,222.0,223.0,224.0,225.0,226.0,227.0,228.0,229.0,230.0,231.0,232.0,233.0,234.0,235.0,236.0,237.0,238.0,239.0,240.0,241.0,242.0,243.0,244.0,245.0,246.0,247.0,248.0,249.0,250.0,251.0,252.0,253.0,254.0,255.0,256.0,257.0,258.0,259.0,260.0,261.0,262.0,263.0,264.0,265.0,266.0,267.0,268.0,269.0,270.0,271.0,272.0,273.0,274.0,275.0,276.0,277.0,278.0,279.0,280.0,281.0,282.0};
    s_s = Eigen::RowVectorXd::Map(tmp.data(), tmp.size());

    tmp = std::vector<double>{0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,21.0,22.0,23.0,24.0,25.0,26.0,26.999999999996017,27.999999995194283,28.999999919285234,29.999999515323807,30.999998191521954,31.999994876865735,32.999987876734103,33.999974728521217,34.999952057265176,35.999915431287363,36.999859217848133,37.999776438826316,38.999658626432165,39.999495678965374,40.999275716632610,41.998984937441620,42.998608309708828,43.998133401187708,44.997548820507518,45.996843177857926,46.996005084808239,47.995023154437263,48.993886001463018,49.992582242372535,50.991100495551549,51.989429381414240,52.987557522533990,53.985476192566587,54.983187800910279,55.980699327595410,56.978019817701430,57.975160211313288,58.972133173594401,59.968952924978048,60.965635071475475,61.962196435095926,62.958654884371143,63.955029164974363,64.951338730421867,65.947603572843306,66.943844053805719,67.940078870772453,68.936313666195588,69.932548461618737,70.928783257041886,71.925018052465035,72.921252847888169,73.917487643311318,74.913722438734467,75.909957234157616,76.906192029580751,77.902426825003900,78.898661620427049,79.894896415850198,80.891131211273347,81.887366006696482,82.883600802119631,83.879835597542780,84.876070392965914,85.872305188389063,86.868539983812212,87.864774779235361,88.861009574658510,89.857244370081645,90.853479165504794,91.849713960927943,92.845948756351078,93.842183551774227,94.838418347197376,95.834653142620525,96.830887938043674,97.827122733466808,98.823357528889957,99.819592324313106,100.815827119736241,101.812061915159404,102.808296710582539,103.804531506005688,104.800766301428837,105.797001096852284,106.793252321366325,107.789600833653282,108.786139834724679,109.782954876369516,110.780120037234454,111.777694094164872,112.775716688026975,113.774204483916407,114.773147326515229,115.772504392388029,116.772200342209047,117.772121477284699,118.772111906280728,119.771969729776487,120.771443252151073,121.770227232352056,122.767959235907469,123.764241643561448,124.758705892802240,125.750991200046201,126.740737572212197,127.727585937324221,128.711178274779797,129.691157745236865,130.667168820072391,131.638857410365034,132.605870995356014,133.567858750340520,134.524473553967312,135.475538545612096,136.421212865129007,137.361760930777564,138.297517438074408,139.228879656425477,140.156299864722172,141.080277923375803,142.001353975337679,142.920101264409709,143.837119055571520,144.753025639122399,145.668449869542798,146.583828141882918,147.499206414223039,148.414584686563160,149.329962958903309,150.245341231243430,151.160719503583550,152.076097775923671,152.991476048263792,153.906854320603941,154.822231907531489,155.737515090715021,156.652423284660074,157.566651766598085,158.479892355685053,159.391831875989681,160.302150627950084,161.210520871074152,162.116605320786590,163.020055662483145,163.920511086039170,164.817596844233634,165.710922838792527,166.600082238023532,167.484650130308808,168.364182218040185,169.238213556923768,170.106257345941941,170.967803773644363,171.822325207597970,172.669450326763922,173.509000497444333,174.340808874124946,175.164710149834207,175.980540588994700,176.788138059962705,177.587342067249239,178.377993783415235,179.159936080636044,179.933013561927339,180.697072592027894,181.451961327931542,182.197529749064529,182.933785955069141,183.661374655218282,184.381131198426317,185.093925783135006,185.800658747176158,186.502256043975905,187.199664883336112,187.893849513277956,188.585787117993846,189.276463805807509,189.966806805788650,190.657146479530212,191.347486153271745,192.037825827013307,192.728165500754841,193.418505174496403,194.108844848237936,194.799184521979498,195.489524195721032,196.179863869462594,196.870203543204127,197.560543216945689,198.250882890687222,198.941222564428784,199.631562238170318,200.321901911911880,201.012241585653413,201.702581259394975,202.392920933136509,203.083260606878071,203.773600280619604,204.463939954361166,205.154304606060634,205.845045825009066,206.536743738364578,207.229981003833416,207.925336680076583,208.623384838982645,209.324693157267461,210.029821481914752,210.739320364121681,211.453729556595164,212.173576469264532,212.899374578731710,213.631621787074437,214.370798725953478,215.117367002352438,215.871767382700938,216.634417912601492,217.405643146313508,218.185409162326749,218.973573276795520,219.769991239285389,220.574517288736246,221.387004180139058,222.207303211485254,223.035264250982124,223.870735764529741,224.713564843455458,225.563597232498921,226.420677358044031,227.284648356592413,228.155352103472495,229.032561590029417,229.915756001967395,230.804357443270106,231.697816836275592,232.595611841070564,233.497244693862797,234.402239978061488,235.310142336944153,236.220514136097705,237.132933083194558,238.046989812110894,238.962285437909685,239.878429088803756,240.795035420880708,241.711753392992932,242.628471958909955,243.545190524826978,244.461909090743973,245.378627656660996,246.295346222577990,247.212064788495013,248.128783354412008,249.045501920329031,249.962220486246025,250.878939052163048,251.795657618080043,252.712376183997065,253.629094749914060,254.545813315831083,255.462531881748077};
    s_x = Eigen::RowVectorXd::Map(tmp.data(), tmp.size());

    tmp = std::vector<double>{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.000001188252074,0.000083926672976,0.000456054585026,0.001336952638479,0.002946001093142,0.005502579156041,0.009226063793424,0.014335827858733,0.021051237378180,0.029591647835574,0.040176399298082,0.053024810224607,0.068356169798559,0.086389728626819,0.107344687646813,0.131440185083711,0.158865792638911,0.189665821820057,0.223839933647763,0.261387738657641,0.302308808937195,0.346602678130588,0.394268841443940,0.445306755651113,0.499715839099929,0.557495471718778,0.618644995006527,0.683123246625290,0.750730848588110,0.821229857816811,0.894382449439360,0.969950915865349,1.047697663606149,1.127385208042127,1.208776166339155,1.291633248716499,1.375719248267953,1.460797029537957,1.546629516054286,1.632979677018735,1.719610513357153,1.806306473255657,1.893002680717133,1.979698888178609,2.066395095640085,2.153091303101561,2.239787510563037,2.326483718024513,2.413179925485989,2.499876132947465,2.586572340408941,2.673268547870417,2.759964755331893,2.846660962793369,2.933357170254845,3.020053377716321,3.106749585177797,3.193445792639273,3.280142000100748,3.366838207562225,3.453534415023701,3.540230622485177,3.626926829946653,3.713623037408128,3.800319244869605,3.887015452331080,3.973711659792556,4.060407867254032,4.147104074715509,4.233800282176984,4.320496489638460,4.407192697099936,4.493888904561413,4.580585112022888,4.667281319484364,4.753977526945841,4.840673734407316,4.927369941868792,5.014066149330269,5.100762356788285,5.187269402649489,5.272647385264233,5.355769890056103,5.435509873142055,5.510739401170247,5.580329456018182,5.643149826009500,5.698069105346280,5.743954823488882,5.779673726238328,5.804092230276573,5.816077072885556,5.814496178482607,5.798219763462009,5.766121700602806,5.717081163972251,5.649985214425973,5.564013527274636,5.459082007823067,5.335228724377538,5.192498609907223,5.030943445742850,4.850621842790880,4.651599220269915,4.433947781977167,4.197746490093478,3.943081036536493,3.670043811872321,3.378739869978881,3.069791701574246,2.744709936589323,2.405075610643263,2.052448969491482,1.688370076569804,1.314359922256791,0.931921973234227,0.542544101673096,0.147700835291348,-0.251144129440661,-0.652535207582321,-1.055025530919824,-1.457620387478629,-1.860215244037434,-2.262810100596240,-2.665404957155045,-3.067999813713850,-3.470594670272654,-3.873189526831460,-4.275784383390265,-4.678379239949070,-5.080975654900462,-5.483786613260938,-5.887448419634032,-6.292647049766198,-6.700066942953313,-7.110390298609980,-7.524296354119881,-7.942460638260155,-8.365554194552629,-8.794242768970232,-9.229185956519334,-9.671036301329353,-10.120438345010925,-10.578027618195236,-11.044429570341233,-11.520258433096595,-12.006116012724361,-12.502590407362561,-13.010254645171241,-13.529655032105932,-14.061032930884723,-14.604299853992574,-15.159347836888101,-15.726066573755990,-16.304343439428287,-16.894063511766429,-17.495109594500221,-18.107362240518349,-18.730699775606396,-19.364998322627258,-20.010131826139784,-20.665972077449716,-21.332388740087826,-22.009080556278153,-22.695085372517582,-23.389305106257673,-24.090672828737876,-24.798149533506759,-25.510720693254719,-26.227392637656688,-26.947188783376109,-27.669145746046905,-28.392309362946307,-29.115791596493391,-29.839277003988535,-30.562762411483678,-31.286247818978818,-32.009733226473962,-32.733218633969102,-33.456704041464249,-34.180189448959389,-34.903674856454529,-35.627160263949676,-36.350645671444816,-37.074131078939956,-37.797616486435103,-38.521101893930243,-39.244587301425391,-39.968072708920531,-40.691558116415671,-41.415043523910818,-42.138528931405958,-42.862014338901105,-43.585499746396245,-44.308985153891385,-45.032446725431825,-45.755548721798853,-46.477735502803142,-47.198444567364810,-47.917109682808714,-48.633159489621200,-49.346016126489410,-50.055093881409320,-50.759797874795680,-51.459522780703942,-52.153651592479449,-52.841554439380360,-53.522587460977384,-54.196091746411838,-54.861392345892448,-55.517797362126970,-56.164597129714821,-56.801147510763826,-57.427206380517354,-58.042659121830646,-58.647393094044645,-59.241297618258251,-59.824263997584573,-60.396185537044943,-60.956957563096246,-61.506477442788203,-62.044644602547606,-62.571360546585218,-63.086528874922493,-63.590055301034930,-64.081847669108413,-64.561940621249519,-65.030934611285787,-65.489603407597414,-65.938737687764004,-66.379143146925230,-66.811638738267405,-67.237055028694556,-67.656232659636856,-68.070020902538630,-68.479276298218323,-68.884861368997662,-69.287643392252377,-69.688493223838449,-70.088284159691142,-70.487819088814661,-70.887352655493444,-71.286886222172214,-71.686419788850984,-72.085953355529767,-72.485486922208537,-72.885020488887307,-73.284554055566090,-73.684087622244860,-74.083621188923630,-74.483154755602413,-74.882688322281183,-75.282221888959953,-75.681755455638722,-76.081289022317506,-76.480822588996276};
    s_y = Eigen::RowVectorXd::Map(tmp.data(), tmp.size());

    tmp = std::vector<double>{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.000011170588879,0.000190869712753,0.000589949592975,0.001208410229546,0.002046251622464,0.003103473771731,0.004380076677347,0.005876060339310,0.007591424757622,0.009526169932282,0.011680295863290,0.014053802550647,0.016646689994352,0.019458958194405,0.022490607150807,0.025741636863556,0.029116981697842,0.032492849487713,0.035868717277583,0.039244585067454,0.042620452857324,0.045996320647195,0.049372188437065,0.052748056226936,0.056123924016806,0.059499791806677,0.062875652787186,0.066130784662227,0.069148044437593,0.071927432113286,0.074468947689304,0.076772591165648,0.078838362542319,0.080666261819315,0.082256288996637,0.083608444074285,0.084722727052258,0.085599137930558,0.086237676709184,0.086638343388136,0.086801137967413,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805181254977,0.086805177311339,0.086237060878270,0.084538683071922,0.081710043892297,0.077751143339392,0.072661981413210,0.066442558113749,0.059092873441011,0.050612927394993,0.041002719975698,0.030262251183125,0.018391521017273,0.005390529478143,6.274444583745320,6.259183069459634,6.242791293800670,6.225269256768426,6.206629749638825,6.187582364570888,6.168534979502951,6.149487594435014,6.130440209367077,6.111392824299140,6.092345439231202,6.073298054163265,6.054250669095328,6.035203284027391,6.016155898959454,5.997108513891517,5.978126642462779,5.960325166316444,5.944105104881419,5.929466458157702,5.916409226145292,5.904933408844191,5.895039006254398,5.886726018375914,5.879994445208736,5.874844286752868,5.871275543008308,5.869288213975056,-0.414349821837018,-0.414349821837018,-0.414349821837018,-0.414349821837018,-0.414349821837018,-0.414349821837018,-0.414349821837018,-0.414349821837018,-0.414349821837018,-0.414349821837018,5.868814092880601,5.868259581399777,5.866954459148588,5.864898726127035,5.862092382335116,5.858535427772832,5.854227862440183,5.849169686337169,5.843360899463790,5.836801501820046,5.829491493405937,5.821430874221462,5.812619644266622,5.803057803541417,5.792745352045848,5.781682289779913,5.769868616743612,5.757304332936947,5.743989438359916,5.730002511732753,5.715905159975097,5.701807808217441,5.687710456459786,5.673613104702130,5.659515752944474,5.645418401186818,5.631321049429163,5.617223697671507,5.603126345913851,5.589028994156195,5.574931642398539,5.560834290640884,5.546736941533408,5.533328364184353,5.521291941984046,5.510627674932485,5.501335563029673,5.493415606275606,5.486867804670288,5.481692158213717,5.477888666905893,5.475457330746816,5.474398149736487,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,-0.808837882819908,5.474510594606136,5.475429624629644,5.477158525031762,5.479697295812491,5.483045936971831,5.487204448509780,5.492172830426339,5.497951082721510,5.504539205395290,5.511937198447682,5.520145061878683,5.529162795688295,5.538990399876518,5.549627874443350,5.561075219388793,5.573332434712846,5.586399520415510,5.599926164096143,5.613454785645388,5.626983407194634,5.640512028743879,5.654040650293124,5.667569271842369,5.681097893391614,5.694626514940860,5.708155136490105,5.721683758039350,5.735212379588596,5.748741001137841,5.762269622687086,5.775798244236332,5.788884781923683,5.801017461479484,5.812195609481688,5.822419225930296,5.831688310825306,5.840002864166718,5.847362885954532,5.853768376188750,5.859219334869370,5.863715761996393,5.867257657569818,5.869845021589646,5.871477854055876,5.872156154968510,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957,-0.411007982074957};
    s_t = Eigen::RowVectorXd::Map(tmp.data(), tmp.size());

    tmp = std::vector<double>{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.000070008745700,0.000289389502048,0.000508770258396,0.000728151014745,0.000947531771093,0.001166912527441,0.001386293283789,0.001605674040138,0.001825054796486,0.002044435552834,0.002263816309183,0.002483197065531,0.002702577821879,0.002921958578227,0.003141339334576,0.003360720090924,0.003375867789870,0.003375867789870,0.003375867789870,0.003375867789870,0.003375867789870,0.003375867789870,0.003375867789870,0.003375867789870,0.003375867789870,0.003375867789870,0.003374067924878,0.003136195825204,0.002898323725529,0.002660451625855,0.002422579526181,0.002184707426507,0.001946835326833,0.001708963227159,0.001471091127485,0.001233219027811,0.000995346928137,0.000757474828463,0.000519602728789,0.000281730629115,0.000043858529441,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.000002985746430,-0.001133247119709,-0.002263508492987,-0.003393769866265,-0.004524031239543,-0.005654292612821,-0.006784553986100,-0.007914815359378,-0.009045076732656,-0.010175338105934,-0.011305599479213,-0.012435860852491,-0.013566122225769,-0.014696383599047,-0.015826644972326,-0.016956906345604,-0.018087167718882,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.019047385067937,-0.018592183501988,-0.017010768790680,-0.015429354079372,-0.013847939368063,-0.012266524656755,-0.010685109945447,-0.009103695234139,-0.007522280522831,-0.005940865811522,-0.004359451100214,-0.002778036388906,-0.001196621677598,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.000179206095641,-0.000929816866006,-0.001680427636371,-0.002431038406736,-0.003181649177101,-0.003932259947466,-0.004682870717832,-0.005433481488197,-0.006184092258562,-0.006934703028927,-0.007685313799292,-0.008435924569657,-0.009186535340022,-0.009937146110387,-0.010687756880752,-0.011438367651118,-0.012188978421483,-0.012939589191848,-0.013690199962213,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014097351757656,-0.014094654923428,-0.012722499774681,-0.011350344625934,-0.009978189477187,-0.008606034328439,-0.007233879179692,-0.005861724030945,-0.004489568882198,-0.003117413733450,-0.001745258584703,-0.000373103435956,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.000514094834203,0.001323965212813,0.002133835591424,0.002943705970034,0.003753576348644,0.004563446727255,0.005373317105865,0.006183187484475,0.006993057863086,0.007802928241696,0.008612798620307,0.009422668998917,0.010232539377527,0.011042409756138,0.011852280134748,0.012662150513359,0.013472020891969,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.013528621549245,0.012609945332600,0.011655413779003,0.010700882225406,0.009746350671808,0.008791819118211,0.007837287564614,0.006882756011016,0.005928224457419,0.004973692903821,0.004019161350224,0.003064629796627,0.002110098243029,0.001155566689432,0.000201035135834,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
    s_k = Eigen::RowVectorXd::Map(tmp.data(), tmp.size());


    // create curve
    Curve crv1;
    createCurve(&crv1, 0.0, 0.0, 0.0, RowVector3d(0.0, 50.0, 100.0), RowVector3d(0.0, 0.0, 0.0));
    EXPECT_DOUBLE_EQ(crv1.length(), 100.0);

    // test points
    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({RowVector3d(0.0, 0.0, 0.0), 0.0, 0.0}),   crv1(1e-12),   1e-9));
    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({RowVector3d(25.0, 0.0, 0.0), 0.0, 0.0}),  crv1(25.0),  1e-12));
    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({RowVector3d(50.0, 0.0, 0.0), 0.0, 0.0}),  crv1(50.0),  1e-12));
    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({RowVector3d(75.0, 0.0, 0.0), 0.0, 0.0}),  crv1(75.0),  1e-12));
    EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint({RowVector3d(100.0, 0.0, 0.0), 0.0, 0.0}), crv1(100.0), 1e-12));

    // test bounds
    EXPECT_THROW(crv1(-1.0), std::invalid_argument); // error
    EXPECT_THROW(crv1(101.0), std::invalid_argument); // error

    // create test points
    createTestPoints();

    // create curve and check length
    Curve crv;
    createCurve(&crv, 0.0, 0.0, 0.0, s_sC, s_kC);
    EXPECT_DOUBLE_EQ(s_sC(s_sC.cols() - 1), crv.length());

    // check each point
    for(size_t i = 0; i < s_s.cols(); ++i)
        EXPECT_TRUE(CurveTest::compareCurvePoints(def::CurvePoint(
                {RowVector3d(s_x(i), s_y(i), 0.0), s_t(i), s_k(i)}), crv(s_s(i)), 1e-12));

}


TEST_F(CurveTest, CurveReverse) {

    using namespace Eigen;


    // create line
    auto l = createLine(10.0, 20.0, M_PI * 0.2, 50.0);

    // reverse
    Line lr{};
    l.reverse(&lr);

    // create test knots
    auto s = base::maxspace(0.0, l.length(), 1.0 / 3.0);
    auto sr = (l.length() * Eigen::RowVectorXd::Ones(s.size()) - s).eval();

    // get positions
    auto p = l.positions(s);
    auto pr = lr.positions(sr);

    // compare points
    EXPECT_TRUE(compareCurvePointVectors(p, pr, def::EPS_DISTANCE, M_PI));



    // create test points
    createTestPoints();

    // create curve and check length
    Curve crv;
    createCurve(&crv, 100.0, -200.0, -1.1112, s_sC, s_kC);

    // create test knots
    auto sc = base::maxspace(0.0, crv.length(), 1.0 / 3.0);
    auto scr = (crv.length() * Eigen::RowVectorXd::Ones(sc.size()) - sc).eval();

    // reverse curve
    Curve crv_rev;
    crv.reverse(&crv_rev);

    // get positions
    auto pc = crv.positions(sc);
    auto pcr = crv_rev.positions(scr);

    // compare points
    EXPECT_TRUE(compareCurvePointVectors(pc, pcr, def::EPS_DISTANCE, M_PI, -1.0));

}


TEST_F(CurveTest, Steps) {

    // test elements

    Eigen::RowVectorXd ref(11);
    ref << 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0;

    auto line = createLine(0.0, 0.0, 0.0, 10.0);
    auto ds = line.steps(0.1, 1.0);
    EXPECT_EQ(11, ds.cols());
    EXPECT_TRUE(ds.isApprox(ref, def::EPS_DISTANCE));

    auto arc = createArc(0.0, 0.0, 0.0, 10.0, 10.0);
    ds = arc.steps(0.2, 1.0);
    EXPECT_EQ(11, ds.cols());
    EXPECT_TRUE(ds.isApprox(ref, def::EPS_DISTANCE));

    ds = arc.steps(0.1, 2.0);
    EXPECT_EQ(11, ds.cols());
    EXPECT_TRUE(ds.isApprox(ref, def::EPS_DISTANCE));

    auto spi = createSpiral(0.0, 0.0, 0.0, 0.0, 0.01, 10.0);
    ds = spi.steps(0.1, 1.0);
    EXPECT_EQ(11, ds.cols());
    EXPECT_TRUE(ds.isApprox(ref, def::EPS_DISTANCE));

    ds = spi.steps(0.01, 5.0);
    EXPECT_EQ(6, ds.cols());


    // test curve

    Eigen::RowVectorXd s(6);
    s << 0.0, 10.0, 20.0, 30.0, 40.0, 50.0;

    Eigen::RowVectorXd k(6);
    k << 0.0, 0.0, 0.01, 0.01, 0.0, 0.0;

    Curve crv;
    createCurve(&crv, 0.0, 0.0, 0.0, s, k);

    ds = crv.steps(0.01, 1.0);
    // TODO: check


}