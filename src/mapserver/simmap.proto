// Copyright (c) 2020 Jens Klimke <jens.klimke@rwth-aachen.de>. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
// Created by Jens Klimke on 2020-07-15.
//

syntax = "proto3";

package simmap.agent_interface;


service AgentEnvironmentServer {

    //    rpc clear (Void) returns (Void);
    //    rpc loadMap (MapFile) returns (MapInstance);
    //    rpc unloadMap (MapInstance) returns (Void);
    rpc registerAgent (AgentMap) returns (Void);
    rpc unregisterAgent (AgentInstance) returns (Void);
    rpc setTrack (AgentTrack) returns (Void);
    rpc getPosition (AgentInstance) returns (Position);
    rpc setMapPosition (AgentMapPosition) returns (TrackLengths);
    rpc getMapPosition (AgentInstance) returns (MapPosition);
    rpc match (AgentPositionUpdate) returns (MapPosition);
    rpc move (AgentDisplacement) returns (TrackLengths);
    rpc switchLane (AgentLane) returns (Void);
    rpc horizon (AgentGridPoints) returns (Horizon);
    rpc objects (AgentInstance) returns (ObjectList);
    rpc lanes (AgentInstance) returns (LaneList);
    rpc targets (AgentInstance) returns (TargetList);

}


message Void {
    bool blank = 1;
}

message MapFile {
    string filename = 1;
}

message MapInstance {
    uint32 id = 1;
}

message AgentInstance {
    uint32 id = 1;
}

message AgentMap {
    AgentInstance agent = 1;
    MapInstance map = 2;
}

message Track {
    repeated string roads = 1;
}

message AgentTrack {
    AgentInstance agent = 1;
    Track track = 2;
}

message AgentMapPosition {
    AgentInstance agent = 1;
    MapPosition mapPosition = 2;
}

message TrackLengths {
    double front = 1;
    double back = 2;
}

message AgentPositionUpdate {
    AgentInstance agent = 1;
    Position position = 2;
    double distance = 3;
}

message AgentDisplacement {
    AgentInstance agent = 1;
    double distance = 2;
    double lateralPosition = 3;
}

message AgentLane {
    AgentInstance agent = 1;
    int32 laneOffset = 2;
}

message AgentGridPoints {
    AgentInstance agent = 1;
    repeated double gridPoints = 2;
}

message Horizon {
    repeated HorizonInformation point = 1;
}

message ObjectList {
    repeated ObjectInformation object = 1;
    uint32 maxNoOfElements = 2;
}

message LaneList {
    repeated LaneInformation lane = 1;
    uint32 maxNoOfElements = 2;
}

message TargetList {
    repeated TargetInformation target = 1;
    uint32 maxNoOfElements = 2;
}

message Position {
    double x = 1;
    double y = 2;
    double z = 3;
    double phi = 4;
    double kappa = 5;
};


message MapPosition {
    string edgeId = 1;
    double longPos = 2;
    double latPos = 3;
};

message HorizonInformation {
    double s = 1;
    double x = 2;
    double y = 3;
    double psi = 4;
    double kappa = 5;
    double egoLaneWidth = 6;
    double rightLaneWidth = 7;
    double leftLaneWidth = 8;
};


message ObjectInformation {

    enum ObjectType {
        STOP_SIGN = 0;
        SPEED_LIMIT = 1;
        UNKNOWN = 2;
    }

    string id = 1;
    double distance = 2;
    ObjectType type = 3;
    int32 value = 4;

};


message LaneInformation {

    enum Direction {
        FORWARDS = 0;
        BACKWARDS = 1;
    };

    enum Access {
        ALLOWED = 0;
        NOT_ALLOWED = 1;
        NOT_POSSIBLE = 2;
    };

    int32 index = 1;
    double width = 2;
    Direction direction = 3;
    double lengthOnTrack = 4;
    double lengthToClosed = 5;
    Access access = 6;
    double s = 7;
    string id = 8;

};


message TargetInformation {
    uint64 id = 1;
    double rel_pos_x = 2;
    double rel_pos_y = 3;
    double distance = 4;
    double latOffset = 5;
    uint32 lane = 6;
};